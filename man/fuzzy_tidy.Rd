% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fuzzy_tidy.R
\name{fuzzy_tidy}
\alias{fuzzy_tidy}
\title{Tidy a messy column of strings of characters in a table}
\usage{
fuzzy_tidy(
  .data,
  stringvar,
  template = NULL,
  threshold = options("fuzzy_threshold")[[1]],
  ...
)
}
\arguments{
\item{.data}{A \code{data.frame} or \code{tbl}}

\item{stringvar}{The name of the column to be tidy (quoted or not)}

\item{template}{A lookup table created with \code{\link[=fuzzy_match]{fuzzy_match()}} (optional)}

\item{threshold}{the minimum distance between strings considered
as OK}

\item{...}{additional arguments for the function
\code{\link[stringdist:stringdist]{stringdist()}}}
}
\description{
This function takes a column of strings of characters and attempts to tidy
it.
}
\details{
The function adds three new column in the dataset. For example, if you target
column is called fruit, it will add:
\itemize{
\item \code{fruit.clean} a column containing only the elements that were considered as
OK
\item \code{fruit.cleaned} a column containing only the elements substituting the
one considered as messy
\item \code{fruit.tidy} a column with all the elements after
cleaning, and thus the proposition as replacement for your original column
}

If the tidying does not satisfy you, think of adjusting the argument
\code{threshold} either directly when calling the function or by
setting a general option for the package using
\code{options("threshold" = X)} with X the number of your choice. You
can also improve the tidying by providing fine-tuning argument to the
underlying workhorse \code{\link[stringdist:stringdist]{stringdist()}} using the ...
argument.

You can use a template created with \code{fuzzy_match}() to control how the messy strings
are being tidy.
}
\examples{
test_df <- data.frame(fruit = c("banana", "blueberry", "limon", "pinapple",
                                "apple", "aple", "Apple", "bonana"),
                      number = 1:8)
fuzzy_template <- fuzzy_match(test_df, fruit)
fuzzy_template
fuzzy_tidy(test_df, "fruit", fuzzy_template)
fuzzy_tidy(test_df, "fruit")

}
\seealso{
\code{fuzzy_pool()}, \code{fuzzy_match()}, \code{\link[stringdist:stringdist]{stringdist()}}
}
